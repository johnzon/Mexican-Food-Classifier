# -*- coding: utf-8 -*-
"""Mexican food classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vIzpeNBhocl7hs4N9HjCSzfAwBQ4Yzb0

# Mexican Food Classifier

![alt text](http://ichef.bbci.co.uk/news/999/cpsprodpb/131C3/production/_94257287_thinkstockphotos-491169768.jpg)

This project idea came to my mind because it can help to the tourism sector in Mazatlán, Mexico. What if we build an app that can detect the most popular mexican dishes, just by taking a picture when we are getting food in a restaurant. Tourists can take pictures of the food they are getting and identify what are them and even get a recipe! 

There are already some projects implementing the same idea, using the FOOD-101 dataset, which contains more classes. You can read a paper implementing the same idea here: https://arxiv.org/ftp/arxiv/papers/1612/1612.00983.pdf

By doing these, we are promoting the food made in Mexico and helping the tourism sector by bringing more  interested people to visit our beautiful town!

I'll train this image classifier to recognize 9 different mexican food dishes given an image.This can be implemented in a phone app that tells you the type of food your camera is looking at.

The project is broken down into multiple steps:

* Load and preprocess the image dataset
* Train the image classifier on your dataset
* Use the trained classifier to predict image content

# Working on a "Mexican Food Dataset"

I used the Google Images Download library.  A Python Script for 'searching' and 'downloading' hundreds of Google images to the local hard disk!. You can use this library with the following instruction:

pip install google_images_download #Installing the package

from google_images_download import google_images_download   #importing the library

response = google_images_download.googleimagesdownload()   #class instantiation

arguments = {"keywords":"Polar bears,baloons,Beaches","limit":20,"print_urls":True}   #creating list of arguments
paths = response.download(arguments)   #passing the arguments to the function
print(paths)   #printing absolute paths of the downloaded images

I collected images using this library and uploaded a food dataset to Google Drive.

This app will identify 9 different kind of mexican food dishes:

- Aguachile
- Callos de Hacha
- Ceviche de Camarón
- Ceviche de Sierra
- Chilaquiles
- Coctel de Camarón
- Tacos Gobernador
- Pozole
- Pescado Zarandeado

Many Americans associate Mexican cuisine exclusively with tacos, enchiladas, refried beans and tequila. However, fish is also prominent in Mexican cooking, especially along the Pacific coast. In fact, the region near Mazatlan has long been recognized as an ideal spot for fishing for both food and sport.

**Aguachile**

![alt text](https://cdn.kiwilimon.com/recetaimagen/28638/th5-640x426-28924.jpg)

If you love ceviche, then Mexico's Shrimp Aguachile is for you. Traditionally made with raw shrimp, lime juice, chilies, cucumber, and onion, it's served immediately while still totally raw, unlike most other ceviche recipes. This dish is very popular in  Sinaloa, México, and it's unbelievably delicious given its simplicity.

**Callos de Hacha**

![alt text](https://media-cdn.tripadvisor.com/media/photo-s/07/bc/af/dd/la-unica.jpg)

Callos de Hacha or scallops is a typical dish of the Pacific coast of Mexico. This delicious dish is very popular in places like Sinaloa, Nayarit, Sonora and Baja California. Some call it a "delicacy of raw seafood lovers". Many also say it’s a great way to get rid of a hangover after a big celebration. The main ingredients are scallops, fresh or dried chilies, lemon and water. There are also versions in which fresh vegetables are added. I hope you enjoy this delicious Mexican dish.

**Ceviche de Camarón**

![alt text](http://3.bp.blogspot.com/-BB3BRzokZcw/VAaI_KBSBZI/AAAAAAAAAgc/678dNCx9cko/s1600/ceviche_camaron.jpg)


Shrimp Ceviche is very popular in the Pacific coast region, especifically, Mazatlán. Ceviche features raw fish and seafood marinated and cured in citrus juices like lemon or lime. This process “cooks” the fish much like preparing it with heat, giving it a firm texture. Other ingredients include fresh cucumbers, tomatoes, celery, onions and corn, seasoned with cilantro, chile or other bold spices. This tasty dish is both filling and pleasing to the palate.

**Ceviche de Sierra**

![alt text](https://mazatleco.com/wp-content/uploads/2014/08/Ceviche-de-sierra-mazatleco.jpg)

This ceviche is typical of Mazatlan, Sinaloa Mexico. It's called Ceviche de Sierra over there; Sierra is just another name for Spanish Mackerel. We prepare this fish by cooking it with the acidity of lime juice. Perfect for hot days!

**Chilaquiles**

![alt text](https://www.cocinavital.mx/wp-content/uploads/2017/11/chilaquiles-rojos-paso-a-paso.jpg)

Chilaquiles are a breakfast staple in Mexico. There are red chilaquiles and green chilaquiles, depending on the type of salsa that you decide to make. Chilaquiles start with a bed of freshly made corn tortilla chips, which can be either baked or fried.

**Coctel de Camarón**

![alt text](https://cocina-casera.com/mx/wp-content/uploads/2017/11/campechana.jpg)

Coctel de camarones, or Mexican shrimp cocktail. I love this version of shrimp cocktail, it’s sort of like a virgin Bloody Mary with cucumber, celery, red onions, avocados and lots of shrimp. Perfect for dipping, or eating with a spoon. Or picking out the shrimp pieces with a fork, then the avocado pieces, and then eating the rest with a spoon as if it were gazpacho.

**Tacos Gobernador**

![alt text](https://www.cocinavital.mx/wp-content/uploads/2017/08/tacos-gobernador.jpg)

These Tacos Gobernador are the perfect crispy cheesy shrimp tacos you will ever come across. These Tacos Gobernador translates to Governor’s Tacos and they are just hyper-delicious. These are cheesy shrimp tacos folded in between a crispy corn tortilla with all the toppings. I promise these tacos will just make you happy every time you make them. Poblano peppers strips, thinly sliced onions, juicy sweet tomatoes, serrano pepper and garlic cooked with shrimps and then laid on top of deliciously melted cheese in between a corn tortilla that is perfectly pan fried in butter. Oh!  And the serrano pepper offers the perfect hint of spiciness you will love.

**Pozole**

![alt text](https://obson.files.wordpress.com/2013/02/receta-pozole.jpg)

Pozole, which means "hominy", is a traditional soup or stew from Mexico. It is made from hominy, with meat, and can be seasoned and garnished with shredded cabbage, chile peppers, onion, garlic, radishes, avocado, salsa or limes. Pozole is typically served on New Year's Eve to celebrate the new year.

**Pescado Zarandeado**

![alt text](https://www.diariohispaniola.com/fotos/1/Pescado-a-la-Talla-Acapulco.jpg)

Mexican Style Grilled Fish (Zarandeado) is a  whole fish, marinated with lime & chilies then grilled over charcoal. It's very popular in Sinaloa.

# Importing the libraries
First up is importing the packages you'll need. It's good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here.
"""

# We need pillow version of 5.3.0
# We will uninstall the older version first
!pip uninstall -y Pillow
# Install the new one
!pip install Pillow==5.3.0
# Let's verify the version
# This should print 5.3.0. If it doesn't, then restart your runtime:
# Menu > Runtime > Restart Runtime
!pip install image
!pip3 install http://download.pytorch.org/whl/cu80/torch-0.4.0-cp36-cp36m-linux_x86_64.whl
!pip3 install torchvision
import PIL
print(PIL.PILLOW_VERSION)

# We will verify that GPU is enabled for this notebook
# Following should print: CUDA is available!  Training on GPU ...
# if it prints otherwise, then you need to enable GPU: 
# From Menu > Runtime > Change Runtime Type > Hardware Accelerator > GPU
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'
import torch
import numpy as np
import matplotlib.pyplot as plt
import torch
import time
import numpy as np
from torch import nn, optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import torchvision
from collections import OrderedDict
from torch.autograd import Variable
from PIL import Image
from torch.optim import lr_scheduler
import copy
import json
import os
import warnings
from os.path import exists
# check if CUDA is available
train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

"""# Load the data

Here you'll use 'torchvision'  to load the data ([documentation](http://pytorch.org/docs/0.3.0/torchvision/index.html)). The dataset is split into two parts, training and validation. For the training, you'll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. If you use a pre-trained network, you'll also need to make sure the input data is resized to 224x224 pixels as required by the networks.

The validation set is used to measure the model's performance on data it hasn't seen yet. For this you don't want any scaling or rotation transformations, but you'll need to resize then crop the images to the appropriate size.

The pre-trained networks available from 'torchvision' were trained on the ImageNet dataset where each color channel was normalized separately. For both sets you'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's ' [0.485, 0.456, 0.406]'  and for the standard deviations ''[0.229, 0.224, 0.225]' , calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.
"""

# Download the dataset and unzip de folder
!gdown https://drive.google.com/uc?id=1xsP_yv__XejYS_tKIhkV-WPQS_quJ6Vx
!unzip mexican_food.zip

data_dir = '/mexican_food'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/valid'
nThreads = 4
batch_size = 32
use_gpu = torch.cuda.is_available()

"""# Label mapping

You'll also need to load in a mapping from category label to category name. You can find this in the file `cat_to_name.json`. It's a JSON object which you can read in with the [`json` module](https://docs.python.org/2/library/json.html). This will give you a dictionary mapping the integer encoded categories to the actual names of the mexican food classes.
"""

import json

with open('categ.json', 'r') as f:
    cat_to_name = json.load(f)

# Define your transforms for the training and validation sets
# Data augmentation and normalization for training
data_transforms = {
    'train': transforms.Compose([
        transforms.RandomRotation(30),
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'valid': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Load the datasets with ImageFolder

data_dir = 'mexican_food'
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          data_transforms[x])
                  for x in ['train', 'valid']}

# Using the image datasets and the trainforms, define the dataloaders
dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size,
                                             shuffle=True, num_workers=4)
              for x in ['train', 'valid']}

dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'valid']}

class_names = image_datasets['train'].classes

"""# Building and training the classifier

Now that the data is ready, it's time to build and train the classifier. As usual, you should use one of the pretrained models from `torchvision.models` to get the image features. Build and train a new feed-forward classifier using those features. I will use Resnet-152.
"""

# Build and train your network

# 1. Load resnet-152 pre-trained network
model = models.resnet152(pretrained=True)
# Freeze parameters so we don't backprop through them

for param in model.parameters():
    param.requires_grad = False

print(model)

# 2. Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout

# Our input_size matches the in_features of pretrained model


from collections import OrderedDict


# Creating the classifier ordered dictionary first

classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(2048, 512)),
                          ('relu', nn.ReLU()),
                          #('dropout1', nn.Dropout(p=0.3)),
                          ('fc2', nn.Linear(512, 9)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))



# Replacing the pretrained model classifier with our classifier
model.fc = classifier

def train_model(model, criterion, optimizer, scheduler, num_epochs=20):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(1, num_epochs+1):
        print('Epoch {}/{}'.format(epoch, num_epochs))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'valid']:
            if phase == 'train':
                scheduler.step()
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs, labels = inputs.to(device), labels.to(device)

                # Zero the parameter gradients
                optimizer.zero_grad()

                # Forward
                # Track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    loss = criterion(outputs, labels)
                    _, preds = torch.max(outputs, 1)

                    # Backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # Statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # Deep copy the model
            if phase == 'valid' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best valid accuracy: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

warnings.filterwarnings("ignore", "(Possibly )?corrupt EXIF data", UserWarning)

# Train a model with a pre-trained network
num_epochs = 15
if use_gpu:
    print ("Using GPU: "+ str(use_gpu))
    model = model.cuda()

# NLLLoss because our output is LogSoftmax
criterion = nn.NLLLoss()

# Adam optimizer with a learning rate
optimizer = optim.Adam(model.fc.parameters(), lr=0.001)
# Optimizer = optim.SGD(model.fc.parameters(), lr = .1, momentum=0.9)
# Decay LR by a factor of 0.1 every 5 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)


model_ft = train_model(model, criterion, optimizer, exp_lr_scheduler, num_epochs=15)

# Do validation on the test set
def test(model, dataloaders, device):
  model.eval()
  accuracy = 0
  
  model.to(device)
    
  for images, labels in dataloaders['valid']:
    images = Variable(images)
    labels = Variable(labels)
    images, labels = images.to(device), labels.to(device)
      
    output = model.forward(images)
    ps = torch.exp(output)
    equality = (labels.data == ps.max(1)[1])
    accuracy += equality.type_as(torch.FloatTensor()).mean()
      
    print("Testing Accuracy: {:.3f}".format(accuracy/len(dataloaders['valid'])))

test(model, dataloaders, device)

"""# Save the checkpoint

Now that the network is trained,  we will save the model so we can load it later for making predictions. We will save the mapping of classes to indices which we get from one of the image datasets: `image_datasets['train'].class_to_idx`. We will attach this to the model as an attribute which makes inference easier later on.

```model.class_to_idx = image_datasets['train'].class_to_idx```

Remember that we'll want to completely rebuild the model later so we can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you'll want to save the number of epochs as well as the optimizer state, `optimizer.state_dict`. You'll likely want to use this trained model in the next part of the project, so best to save it now.
"""

# Save the checkpoint 

model.class_to_idx = dataloaders['train'].dataset.class_to_idx
model.epochs = num_epochs
checkpoint = {'input_size': [3, 224, 224],
                 'batch_size': dataloaders['train'].batch_size,
                  'output_size': 9,
                  'state_dict': model.state_dict(),
                  'data_transforms': data_transforms,
                  'optimizer_dict':optimizer.state_dict(),
                  'class_to_idx': model.class_to_idx,
                  'epoch': model.epochs}
torch.save(checkpoint, 'mexicanfood91_checkpoint.pth')

"""# Loading the checkpoint

At this point it's good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network.
"""

#You can download the model I trained for this project:
!gdown https://drive.google.com/uc?id=1V7jmNLguOCDt2oSLz86bH5tMONbuMq9G

# Write a function that loads a checkpoint and rebuilds the model

def load_checkpoint(filepath):
    checkpoint = torch.load(filepath)
    model = models.resnet152()
    
    # Our input_size matches the in_features of pretrained model
    input_size = 2048
    output_size = 9
    
    classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(2048, 512)),
                          ('relu', nn.ReLU()),
                          #('dropout1', nn.Dropout(p=0.2)),
                          ('fc2', nn.Linear(512, 9)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

    # Replacing the pretrained model classifier with our classifier
    model.fc = classifier
    
    
    model.load_state_dict(checkpoint['state_dict'])
    
    return model, checkpoint['class_to_idx']

# Get index to class mapping
loaded_model, class_to_idx = load_checkpoint('mexicanfood91_checkpoint.pth')
idx_to_class = { v : k for k,v in class_to_idx.items()}

"""# Inference for classification

Now you'll write a function to use a trained network for inference. That is, you'll pass an image into the network and predict the class of the mexican food dish in the image. Write a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like
"""

def process_image(image):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    
    # Process a PIL image for use in a PyTorch model

    size = 256, 256
    image.thumbnail(size, Image.ANTIALIAS)
    image = image.crop((128 - 112, 128 - 112, 128 + 112, 128 + 112))
    npImage = np.array(image)
    npImage = npImage/255.
        
    imgA = npImage[:,:,0]
    imgB = npImage[:,:,1]
    imgC = npImage[:,:,2]
    
    imgA = (imgA - 0.485)/(0.229) 
    imgB = (imgB - 0.456)/(0.224)
    imgC = (imgC - 0.406)/(0.225)
        
    npImage[:,:,0] = imgA
    npImage[:,:,1] = imgB
    npImage[:,:,2] = imgC
    
    npImage = np.transpose(npImage, (2,0,1))
    
    return npImage

def imshow(image, ax=None, title=None):
    """Imshow for Tensor."""
    if ax is None:
        fig, ax = plt.subplots()
    
    # PyTorch tensors assume the color channel is the first dimension
    # but matplotlib assumes is the third dimension
    image = image.numpy().transpose((1, 2, 0))
    
    # Undo preprocessing
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    image = std * image + mean
    
    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed
    image = np.clip(image, 0, 1)
    
    ax.imshow(image)
    
    return ax

"""# Class Prediction

Once you can get images in the correct format, it's time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You'll want to calculate the class probabilities then find the $K$ largest values.

To get the top $K$ largest values in a tensor use [`x.topk(k)`](http://pytorch.org/docs/master/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using `class_to_idx` which hopefully you added to the model or from an `ImageFolder` you used to load the data ([see here](#Save-the-checkpoint)). Make sure to invert the dictionary so you get a mapping from index to class as well.

Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.

```python
probs, classes = predict(image_path, model)
print(probs)
print(classes)
> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]
> ['70', '3', '45', '62', '55']
"""

def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    
    # Implement the code to predict the class from an image file
    
    image = torch.FloatTensor([process_image(Image.open(image_path))])
    model.eval()
    output = model.forward(Variable(image))
    pobabilities = torch.exp(output).data.numpy()[0]
    

    top_idx = np.argsort(pobabilities)[-topk:][::-1] 
    top_class = [idx_to_class[x] for x in top_idx]
    top_probability = pobabilities[top_idx]

    return top_probability, top_class

print (predict('mexican_food/valid/aguachile/aguachi.jpg', loaded_model))

"""# Sanity Checking

Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the validation accuracy is high, it's always good to check that there aren't obvious bugs. Use `matplotlib` to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:
"""

# Display an image along with the top 5 classes
def view_classify(img, probabilities, classes, mapper):
    ''' Function for viewing an image and it's predicted classes.
    '''
    img_filename = img.split('/')[-2]
    img = Image.open(img)

    fig, (ax1, ax2) = plt.subplots(figsize=(6,10), ncols=1, nrows=2)
    food_name = mapper[img_filename]
    
    ax1.set_title(food_name)
    ax1.imshow(img)
    ax1.axis('off')
    
    y_pos = np.arange(len(probabilities))
    ax2.barh(y_pos, probabilities)
    ax2.set_yticks(y_pos)
    ax2.set_yticklabels([mapper[x] for x in classes])
    ax2.invert_yaxis()

img = 'mexican_food/valid/ceviche_camaron/ceviche_camaron.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

img = 'mexican_food/valid/ceviche_sierra/ceviche-sierra.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

img = 'mexican_food/valid/gobernador/tacos-gobernador.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

img = 'mexican_food/valid/callos_hacha/images.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

img = 'mexican_food/valid/coctel_camaron/4064627.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

img = 'mexican_food/valid/chilaquiles/Chilaquiles.jpg'
p, c = predict(img, loaded_model)
view_classify(img, p, c, cat_to_name)

"""# CONCLUSIONS

I'm happy with the results, even when the dataset is small. You can use a bigger dataset and add more classes to the project. The more the pics, better results. Experiment with different pretrained models and change hyperparameters to get different results!
"""